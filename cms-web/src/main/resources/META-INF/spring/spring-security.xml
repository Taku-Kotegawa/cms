<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
        http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
    ">

    <sec:http pattern="/resources/**" security="none"/>

    <sec:http pattern="/api/**" use-expressions="true" entry-point-ref="http403EntryPoint">
        <sec:intercept-url pattern="/api/**" access="isAuthenticated()"/>
        <sec:custom-filter position="PRE_AUTH_FILTER" ref="preAuthenticatedProcessingFilter" />
    </sec:http>

    <sec:http entry-point-ref="loginUrlAuthenticationEntryPoint">
        <sec:logout logout-url="/logout" success-handler-ref="logoutSuccessHandler"
                    delete-cookies="JSESSIONID"/>
        <sec:csrf request-matcher-ref="csrfMatcher"/>
        <sec:access-denied-handler ref="accessDeniedHandler"/>
        <sec:custom-filter ref="userIdMDCPutFilter" after="ANONYMOUS_FILTER"/>
        <sec:custom-filter position="FORM_LOGIN_FILTER" ref="customUsernamePasswordAuthenticationFilter" />
        <sec:custom-filter position="SWITCH_USER_FILTER" ref="switchUserProcessingFilter" />
<!--        <sec:session-management>-->
<!--            <sec:concurrency-control-->
<!--                    max-sessions="1"-->
<!--                    error-if-maximum-exceeded="true"-->
<!--                    session-registry-ref="sessionRegistry" />-->
<!--        </sec:session-management>-->
        <sec:intercept-url pattern="/login/**" access="permitAll"/>
        <sec:intercept-url pattern="/account/create" access="permitAll"/>
        <sec:intercept-url pattern="/reissue/**" access="permitAll"/>
        <sec:intercept-url pattern="/api/receivedmail" access="permitAll"/>
        <sec:intercept-url pattern="/unlock/**" access="hasRole('ADMIN')"/>
        <sec:intercept-url pattern="/admin/account/impersonate/**" access="hasRole('ADMIN')"/>

        <!-- /** は一番下 -->
        <sec:intercept-url pattern="/**" access="isAuthenticated()"/>

        <!-- ロールの階層化 -->
<!--        <sec:expression-handler ref="webExpressionHandler"/>-->

    </sec:http>

<!-- 認証機能(ログイン画面)の拡張 -->

    <bean id="loginUrlAuthenticationEntryPoint"
          class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <constructor-arg value="/login" />
    </bean>

    <bean id="customUsernamePasswordAuthenticationFilter"
          class="jp.co.stnet.cms.app.common.authentication.CustomUsernamePasswordAuthenticationFilter">
        <!-- (5) -->
        <property name="requiresAuthenticationRequestMatcher">
            <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                <constructor-arg index="0" value="/login" />
                <constructor-arg index="1" value="POST" />
            </bean>
        </property>
        <!-- (6) -->
        <property name="authenticationManager" ref="authenticationManager" />
        <!-- (7) -->
        <property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy" />
        <!-- (8) -->
        <property name="authenticationFailureHandler">
            <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
                <constructor-arg value="/login?error=true" />
            </bean>
        </property>
        <!-- (9) -->
        <property name="authenticationSuccessHandler">
            <bean class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler" />
        </property>
    </bean>

    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider ref="customUsernamePasswordAuthenticationProvider" />
        <sec:authentication-provider ref="preauthAuthProvider" />
    </sec:authentication-manager>

    <bean id="customUsernamePasswordAuthenticationProvider"
          class="jp.co.stnet.cms.app.common.authentication.CustomUsernamePasswordAuthenticationProvider">
        <property name="userDetailsService" ref="loggedInUserDetailsService" />
        <property name="passwordEncoder" ref="passwordEncoder" />
    </bean>

    <!-- https://spring.pleiades.io/spring-security/site/docs/5.0.19.BUILD-SNAPSHOT/reference/html/session-mgmt.html -->
    <bean id="sessionAuthenticationStrategy"
          class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
        <constructor-arg>
            <util:list>
                <bean class="org.springframework.security.web.csrf.CsrfAuthenticationStrategy">
                    <constructor-arg ref="csrfTokenRepository" />
                </bean>
                <bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy" />
                <bean class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
                    <constructor-arg ref="sessionRegistry"/>
                    <property name="maximumSessions" value="-1" />
                    <property name="exceptionIfMaximumExceeded" value="true" />
                </bean>
                <bean class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
                    <constructor-arg ref="sessionRegistry"/>
                </bean>
            </util:list>
        </constructor-arg>
    </bean>

    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

    <bean id="csrfTokenRepository"
          class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository" />

    <!-- CSRF Protection -->
    <bean id="accessDeniedHandler"
        class="org.springframework.security.web.access.DelegatingAccessDeniedHandler">
        <constructor-arg index="0">
            <map>
                <entry
                    key="org.springframework.security.web.csrf.InvalidCsrfTokenException">
                    <bean
                        class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
                        <property name="errorPage"
                            value="/WEB-INF/views/common/error/invalidCsrfTokenError.jsp" />
                    </bean>
                </entry>
                <entry
                    key="org.springframework.security.web.csrf.MissingCsrfTokenException">
                    <bean
                        class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
                        <property name="errorPage"
                            value="/WEB-INF/views/common/error/missingCsrfTokenError.jsp" />
                    </bean>
                </entry>
            </map>
        </constructor-arg>
        <constructor-arg index="1">
            <bean
                class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
                <property name="errorPage"
                    value="/WEB-INF/views/common/error/accessDeniedError.jsp" />
            </bean>
        </constructor-arg>
    </bean>

    <!-- Put UserID into MDC -->
    <bean id="userIdMDCPutFilter" class="org.terasoluna.gfw.security.web.logging.UserIdMDCPutFilter">
    </bean>

    <!-- logout -->
    <bean id="logoutSuccessHandler"
          class="jp.co.stnet.cms.app.common.security.CacheClearLogoutSuccessHandler">
        <constructor-arg value="/"/>
    </bean>


    <!-- ロール階層化 -->
<!--    <bean id="roleHierarchy"-->
<!--          class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl"> &lt;!&ndash; (1) &ndash;&gt;-->
<!--        <property name="hierarchy"> &lt;!&ndash; (2) &ndash;&gt;-->
<!--            <value>-->
<!--                ROLE_ADMIN > ROLE_STAFF-->
<!--                ROLE_STAFF > ROLE_USER-->
<!--            </value>-->
<!--        </property>-->
<!--    </bean>-->

<!--    <bean id="webExpressionHandler"-->
<!--          class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">-->
<!--        <property name="roleHierarchy" ref="roleHierarchy"/>-->
<!--    </bean>-->

<!--    <bean id="methodExpressionHandler"-->
<!--          class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler"> &lt;!&ndash; (1) &ndash;&gt;-->
<!--        <property name="roleHierarchy" ref="roleHierarchy"/>-->
<!--    </bean>-->

<!--    <sec:global-method-security pre-post-annotations="enabled">-->
<!--        <sec:expression-handler ref="methodExpressionHandler"/>-->
<!--    </sec:global-method-security>-->


    <bean id="csrfMatcher" class="org.springframework.security.web.util.matcher.OrRequestMatcher">
        <constructor-arg>
            <util:list value-type="org.springframework.security.web.util.matcher.RequestMatcher">
                <bean class="org.springframework.security.web.util.matcher.RegexRequestMatcher">
                    <constructor-arg name="pattern" value="^(?!/api).*"/>
                    <constructor-arg name="httpMethod" value="POST"/>
                </bean>
                <bean class="org.springframework.security.web.util.matcher.RegexRequestMatcher">
                    <constructor-arg name="pattern" value="^(?!/api).*"/>
                    <constructor-arg name="httpMethod" value="PUT"/>
                </bean>
                <bean class="org.springframework.security.web.util.matcher.RegexRequestMatcher">
                    <constructor-arg name="pattern" value="^(?!/api).*"/>
                    <constructor-arg name="httpMethod" value="DELETE"/>
                </bean>
            </util:list>
        </constructor-arg>
    </bean>

    <!-- ユーザなりすまし機能 -->
    <!-- GET /login/impersonate?username=loginIdOfTheNewUser -->
    <!-- GET /logout/impersonate -->
    <bean id="switchUserProcessingFilter" class="org.springframework.security.web.authentication.switchuser.SwitchUserFilter">
        <property name="userDetailsService" ref="loggedInUserDetailsService" />
        <property name="switchUserUrl" value="/admin/account/impersonate" />
        <property name="exitUserUrl" value="/logout/impersonate" />
        <property name="targetUrl" value="/" />
    </bean>

    <!-- API KEY 認証 -->
    <!-- https://howtodoinjava.com/spring-security/spring-3-security-siteminder-pre-authentication-example/ -->
    <!-- https://stackoverflow.com/questions/12478589/springsecurity-custom-automatic-authentication -->
    <bean id="authenticationUserDetailsService" class="jp.co.stnet.cms.app.common.authentication.CustomAuthenticationUserDetailService" />
    <bean id="accountStatusUserDetailsChecker" class="org.springframework.security.authentication.AccountStatusUserDetailsChecker" />
    <bean id="http403EntryPoint" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"></bean>

<!--    <sec:authentication-manager alias="authenticationManager2">-->
<!--        <sec:authentication-provider ref="preauthAuthProvider" />-->
<!--    </sec:authentication-manager>-->

    <bean id="preAuthenticatedProcessingFilter"
          class="jp.co.stnet.cms.app.common.authentication.CustomPreAuthenticatedProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager" />
    </bean>

    <bean id="preauthAuthProvider" class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
        <property name="preAuthenticatedUserDetailsService" ref="authenticationUserDetailsService" />
        <property name="UserDetailsChecker" ref="accountStatusUserDetailsChecker" />
    </bean>


    <!-- https://stackoverflow.com/questions/3467918/how-to-set-up-spring-security-securitycontextholder-strategy -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass"
                  value="org.springframework.security.core.context.SecurityContextHolder" />
        <property name="targetMethod" value="setStrategyName" />
        <property name="arguments" value="MODE_INHERITABLETHREADLOCAL" />
    </bean>

</beans>
